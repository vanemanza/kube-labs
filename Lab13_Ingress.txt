
Basado en https://kubernetes.io/docs/tasks/access-application-cluster/ingress-minikube/

1. Con el minikube levantado habilitar Ingress:

minikube addons enable ingress  ✅

2. Ver si se levanto bien:

kubectl get pods -n ingress-nginx  ✅

NAME                                        READY   STATUS      RESTARTS   AGE
ingress-nginx-admission-create-r9v9p        0/1     Completed   0          51s
ingress-nginx-admission-patch-x5skq         0/1     Completed   0          51s
ingress-nginx-controller-56d7c84fd4-gfnms   1/1     Running     0          51s

3. Desplegar una aplicacion y exponerla en un Service: ✅


kubectl create deployment web --image=gcr.io/google-samples/hello-app:1.0
web --image=gcr.io/google-samples/hello-app:1.0
deployment.apps/web created


kubectl expose deployment web --type=NodePort --port=8080
--type=NodePort --port=8080
service/web exposed 

4. Desplegar otra aplicacion y su service:✅

kubectl create deployment web2 --image=gcr.io/google-samples/hello-app:2.0
gcr.io/google-samples/hello-app:2.0
deployment.apps/web2 created

kubectl expose deployment web2 --port=8080 --type=NodePort
080 --type=NodePort
service/web2 exposed

5. Crear un Ingress usando el ejemplo del directorio actual:✅

kubectl apply -f example-ingress.yaml

ingress.networking.k8s.io/example-ingress created

6. Esperar hasta que el mismo tenga una direccion creada:✅

kubectl get 
NAME              CLASS   HOSTS   ADDRESS   PORTS   AGE
example-ingress   nginx   *                 80      31s

7. Si no estamos usando el virtualizador de Docker utilizar "minikube ip" y seguir. Si usamos Docker esa IP no nos servira de mucho, seguir los siguientes pasos.
?????✅
ahhhh!!! era esto -> minikube ip
minikube ip
192.168.49.2

8. Crear un tunel:✅

Aclaracion, el ingress controller sera un NodePort, no un LoadBalancer, asi que tampoco minikube tunnel 
solucionara nada. Los ingress controllers por lo gral son del tipo LoadBalancer, no asi el 
de este ejemplo. 

observar esto:

 kubectl get svc -n ingress-nginx

 NAME                                 TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)                      AGE
ingress-nginx-controller             NodePort    10.99.235.164   <none>        80:31182/TCP,443:30884/TCP   11m
ingress-nginx-controller-admission   ClusterIP   10.111.39.215   <none>        443/TCP                      11m
 
 Entonces, crear el otro tipo de tuneles:✅

minikube service ingress-nginx-controller -n  ingress-nginx ✅

|---------------|--------------------------|-------------|---------------------------|
|   NAMESPACE   |           NAME           | TARGET PORT |            URL            |
|---------------|--------------------------|-------------|---------------------------|
| ingress-nginx | ingress-nginx-controller | http/80     | http://192.168.49.2:31182 |
|               |                          | https/443   | http://192.168.49.2:30884 |
|---------------|--------------------------|-------------|---------------------------|
[ingress-nginx ingress-nginx-controller http/80
https/443 http://192.168.49.2:31182 -> Hello, world!
Version: 1.0.0
Hostname: web-75995f7dbf-hz4pk
 -> 400 Bad Request
The plain HTTP request was sent to HTTPS port
nginx
http://192.168.49.2:30884]

Elegir la opcion http (la https tambien funcionara, en ese caso agregar https a la url) y pegar en el browser:

http://127.0.0.1:40891 ✅ http://192.168.49.2:31182

Se vera el servicio llamado web. Si en el browser ponemos:

http://127.0.0.1:40891/v2   ✅ http://192.168.49.2:30884]

Se vera el servicio llamado web2.

