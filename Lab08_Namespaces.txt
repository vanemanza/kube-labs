1. Ver los namespaces existentes:âœ…
kubectl get ns

NAME                   STATUS   AGE
default                Active   2m
kube-node-lease        Active   2m
kube-public            Active   2m
kube-system            Active   2m
kubernetes-dashboard   Active   115s

2. Ver los pods de sistema, dentro de su ns correspondiente:âœ…

kubectl get po --namespace kube-system

NAME                               READY   STATUS    RESTARTS        AGE
coredns-668d6bf9bc-brpbt           1/1     Running   0               2m49s
coredns-668d6bf9bc-pwd49           1/1     Running   0               2m49s
etcd-minikube                      1/1     Running   0               2m56s
kube-apiserver-minikube            1/1     Running   0               2m56s
kube-controller-manager-minikube   1/1     Running   0               2m54s
kube-proxy-d7tf5                   1/1     Running   0               2m50s
kube-scheduler-minikube            1/1     Running   0               2m55s
storage-provisioner                1/1     Running   1 (2m19s ago)   2m53s

3. Crear dos namespaces:âœ…

kubectl create namespace primer-ns
kubectl create namespace segundo-ns



4. Crear pods en los dos ns:âœ…
kubectl create deploy hello-node --image=diegochavezcarro/hellonodedocker:latest --port=8080 -n primer-ns
kubectl create deploy hello-node2 --image=diegochavezcarro/hellonodedocker:latest --port=8080 -n primer-ns
kubectl create deploy hello-node --image=diegochavezcarro/hellonodedocker:latest --port=8080 -n segundo-ns
kubectl create deploy hello-node2 --image=diegochavezcarro/hellonodedocker:latest --port=8080 -n segundo-ns

deployment.apps/hello-node created
deployment.apps/hello-node2 created
deployment.apps/hello-node created
deployment.apps/hello-node2 created

5. Listar esos pods, con sus IPs:âœ…

kubectl get pods -o wide -n primer-ns

NAME                           READY   STATUS    RESTARTS   AGE   IP           NODE       NOMINATED NODE   READINESS GATES
hello-node-88d7ff489-2mnxr     1/1     Running   0          72s   10.244.0.6   minikube   <none>           <none>
hello-node2-86cc6d7dbf-fwwwg   1/1     Running   0          71s   10.244.0.7   minikube   <none>           <none>

kubectl get pods -o wide -n segundo-ns

NAME                           READY   STATUS    RESTARTS   AGE    IP           NODE       NOMINATED NODE   READINESS GATES
hello-node-88d7ff489-x9tsj     1/1     Running   0          102s   10.244.0.8   minikube   <none>           <none>
hello-node2-86cc6d7dbf-fc8zq   1/1     Running   0          102s   10.244.0.9   minikube   <none>           <none>



6. Tomar una consola hacia un pod del namespace primer-ns:âœ…

kubectl exec -it hello-node-88d7ff489-2mnxr -n primer-ns -- sh
kubectl exec -it hello-node-594bf69d8-gfq4h -n primer-ns -- sh (ejemplo)

7. Probar las apps internas a los pods con curl:âœ…

Probar localmente:
curl localhost:8080

(venv) vanesa.manzanelli@infraPC-0484:~/CursoDevOpsTecnology$ kubectl exec -it hello-node-88d7ff489-2mnxr -n primer-ns -- sh
# curl localhost:8080
You've hit hello-node-88d7ff489-2mnxr
# 

Probar el otro pod del mismo namespace:
curl 172.17.0.8:8080

# curl 172.17.0.8:8080
curl: (7) Failed to connect to 172.17.0.8 port 8080: No route to host

Probar un pod de otro namespace:
curl 172.17.0.6:8080



QuÃ© sucediÃ³? Hay aislamiento?

8. En otra terminal exponer un servicio a partir de un pod del primer namespace:âœ…

(venv) vanesa.manzanelli@infraPC-0484:~/CursoDevOpsTecnology$ kubectl expose deployment hello-node --type=NodePort -n primer-ns
service/hello-node exposed

kubectl expose deployment hello-node --type=NodePort -n primer-ns

9. Ver la IP creada dentro del cluster:âœ…

(venv) vanesa.manzanelli@infraPC-0484:~/CursoDevOpsTecnology$ kubectl get services -o wide -n primer-ns
NAME         TYPE       CLUSTER-IP      EXTERNAL-IP   PORT(S)          AGE   SELECTOR
hello-node   NodePort   10.103.40.126   <none>        8080:32482/TCP   56s   app=hello-node



10. En la terminal conectada al pod del primer namespace probar acceso al Service:âœ…
curl 10.106.139.96:8080
Se puede ver?


La sesion de la terminal abierta no lo ve. Salir de la misma y abrir otra terminal (paso 6). - continuar desde aca ðŸ¤¹
11. En otra terminal acceder a un pod del segundo namespace:
kubectl exec -it hello-node-594bf69d8-gfq4h -n segundo-ns -- sh
12. Acceder al Service del primer namespace (desde el segundo):
curl 10.106.139.96:8080
Hay aislamiento?
13. Probar acceso al service por nombre:
curl hello-node:8080
No hay un service expuesto con ese nombre en el segundo-ns
Acceder desde un pod del segundo-ns al service del primer-ns:
curl hello-node.primer-ns:8080















